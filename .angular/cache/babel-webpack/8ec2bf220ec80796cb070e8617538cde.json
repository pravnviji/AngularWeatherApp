{"ast":null,"code":"import { RouteReuseStrategy } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./logger.service\";\n/**\n * A route strategy allowing for explicit route reuse.\n * Used as a workaround for https://github.com/angular/angular/issues/18374\n * To reuse a given route, add `data: { reuse: true }` to the route definition.\n */\n\nexport let RouteReusableStrategy = /*#__PURE__*/(() => {\n  class RouteReusableStrategy extends RouteReuseStrategy {\n    constructor(_log) {\n      super();\n      this._log = _log;\n      this.fileName = 'route reusable';\n    }\n\n    shouldDetach(route) {\n      this._log.debug(this.fileName, route);\n\n      return false;\n    }\n\n    store(route, detachedTree) {\n      this._log.debug(this.fileName, route);\n\n      this._log.debug(this.fileName, detachedTree);\n    }\n\n    shouldAttach(route) {\n      this._log.debug(this.fileName, route);\n\n      return false;\n    }\n\n    retrieve(route) {\n      this._log.debug(this.fileName, route);\n\n      return null;\n    }\n\n    shouldReuseRoute(future, curr) {\n      this._log.debug(this.fileName, future);\n\n      this._log.debug(this.fileName, curr);\n\n      return future.routeConfig === curr.routeConfig;\n    }\n\n  }\n\n  RouteReusableStrategy.ɵfac = function RouteReusableStrategy_Factory(t) {\n    return new (t || RouteReusableStrategy)(i0.ɵɵinject(i1.Logger));\n  };\n\n  RouteReusableStrategy.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RouteReusableStrategy,\n    factory: RouteReusableStrategy.ɵfac\n  });\n  return RouteReusableStrategy;\n})();","map":null,"metadata":{},"sourceType":"module"}