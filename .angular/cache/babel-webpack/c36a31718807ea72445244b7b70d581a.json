{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport var LogLevel = /*#__PURE__*/(() => {\n  (function (LogLevel) {\n    LogLevel[LogLevel[\"Off\"] = 0] = \"Off\";\n    LogLevel[LogLevel[\"Custom\"] = 1] = \"Custom\";\n    LogLevel[LogLevel[\"Error\"] = 2] = \"Error\";\n    LogLevel[LogLevel[\"Warning\"] = 3] = \"Warning\";\n    LogLevel[LogLevel[\"Info\"] = 4] = \"Info\";\n    LogLevel[LogLevel[\"Debug\"] = 5] = \"Debug\";\n  })(LogLevel || (LogLevel = {}));\n\n  return LogLevel;\n})();\nexport class Logger {\n  constructor() {}\n  /**\n   * Enables production mode.\n   * Sets logging level to LogLevel.Warning.\n   */\n\n\n  enableProductionMode() {\n    Logger.level = LogLevel.Error;\n  }\n  /**\n   * Logs messages or objects  with the debug level.\n   * Works the same as console.log().\n   */\n\n\n  debug(source, ...objects) {\n    this.log(source, console.log, LogLevel.Debug, objects);\n  }\n  /**\n   * Logs messages or objects  with the info level.\n   * Works the same as console.log().\n   */\n\n\n  info(source, ...objects) {\n    // tslint:disable-next-line:no-console\n    this.log(source, console.info, LogLevel.Info, objects);\n  }\n  /**\n   * Logs messages or objects  with the warning level.\n   * Works the same as console.log().\n   */\n\n\n  warn(source, ...objects) {\n    this.log(source, console.warn, LogLevel.Warning, objects);\n  }\n  /**\n   * Logs messages or objects  with the error level.\n   * Works the same as console.log().\n   */\n\n\n  error(source, ...objects) {\n    this.log(source, console.error, LogLevel.Error, objects);\n  }\n  /**\n   * @function log\n   * @param source\n   * @param func\n   * @param level\n   * @param objects\n   * @description log messages and events\n   */\n\n\n  log(source, func, level, objects) {\n    const log = ['[' + source + '] ::'].concat(objects);\n\n    if (level <= Logger.level) {\n      func.apply(console, log);\n      Logger.outputs.forEach(output => output.apply(output, [source, level, objects]));\n    }\n  }\n\n}\n/**\n * Current logging level.\n * Set it to LogLevel.Off to disable logs completely.\n */\n\nLogger.level = LogLevel.Debug;\n/**\n * Additional log outputs.\n */\n\nLogger.outputs = [];\n\nLogger.ɵfac = function Logger_Factory(t) {\n  return new (t || Logger)();\n};\n\nLogger.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Logger,\n  factory: Logger.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module"}