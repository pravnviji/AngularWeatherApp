{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { throwError, of } from 'rxjs';\nimport { catchError, retryWhen, take, concat, mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../logger.service\"; // const log = new Logger('ErrorHandlerInterceptor');\n\nexport class HttpResponseWithMessage extends HttpResponse {}\n/**\n * Adds a default error handler to all requests.\n */\n\nexport let ErrorHandlerInterceptor = /*#__PURE__*/(() => {\n  class ErrorHandlerInterceptor {\n    constructor(_log) {\n      this._log = _log;\n    }\n    /**\n     * Intercept API error response\n     * @param  {HttpRequest<any>} request\n     * @param  {HttpHandler} next\n     * @returns Observable\n     */\n\n\n    intercept(request, next) {\n      return next.handle(request).pipe(retryWhen(error => {\n        return error.pipe(mergeMap(errorData => {\n          // retry only if error status is 500\n          return errorData.status === 500 ? of(errorData) : throwError(errorData);\n        }), take(2), concat(throwError(error)));\n      }), catchError(error => this.errorHandler(error)));\n    }\n    /**\n     * Customize the default error handler here if needed\n     * @param response\n     * @returns handler\n     */\n\n\n    errorHandler(response) {\n      const errormessage = `url: ${response.url} status: ${response.status} statusText: ${response.statusText} body: ${response.body}`;\n\n      this._log.error('API error', errormessage);\n\n      throw response;\n    }\n\n  }\n\n  ErrorHandlerInterceptor.ɵfac = function ErrorHandlerInterceptor_Factory(t) {\n    return new (t || ErrorHandlerInterceptor)(i0.ɵɵinject(i1.Logger));\n  };\n\n  ErrorHandlerInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorHandlerInterceptor,\n    factory: ErrorHandlerInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return ErrorHandlerInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}