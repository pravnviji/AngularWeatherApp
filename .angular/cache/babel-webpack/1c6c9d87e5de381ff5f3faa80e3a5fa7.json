{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, retry, throwError } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../core/logger.service\";\nexport let HttpRequestService = /*#__PURE__*/(() => {\n  class HttpRequestService {\n    constructor(http, logger) {\n      this.http = http;\n      this.logger = logger;\n      this.header = new HttpHeaders({\n        responseType: 'JSON'\n      });\n      this.logger.debug(`HttpRequestService`, environment.serverUrl);\n    }\n    /**\n     * Gets http request service\n     * @param url\n     * @param [header]\n     * @returns get\n     */\n\n\n    get(path, header) {\n      this.logger.debug(`HttpRequestService`, `get`);\n      this.logger.debug(`HttpRequestService`, environment.serverUrl + path);\n      header = header !== null && header !== void 0 ? header : this.header;\n      return this.http.get(path, header).pipe(retry(3), catchError(err => this.handleError(err, `GET`, path)));\n    }\n\n    handleError(error, method, url) {\n      this.logger.debug(`:: Exception in ${method} ==> ${url}`, `Error =>`, error);\n      return throwError(() => error);\n    }\n    /**\n     * Posts http request service\n     * @param url\n     * @param body\n     * @param [header]\n     * @returns post\n     */\n\n\n    post(path, body, header) {\n      this.logger.debug(`HttpRequestService`, `post`);\n      this.logger.debug(`HttpRequestService`, body);\n      this.logger.debug(`HttpRequestService`, environment.serverUrl + path);\n      header = header !== null && header !== void 0 ? header : this.header;\n      return this.http.post(path, body, header).pipe(retry(3), catchError(err => this.handleError(err, `POST`, path)));\n    }\n    /**\n     * Puts http request service\n     * @param url\n     * @param [body]\n     * @param [header]\n     * @returns put\n     */\n\n\n    put(path, body, header) {\n      header = header !== null && header !== void 0 ? header : this.header;\n      return this.http.put(path, body, header).pipe(retry(3), catchError(err => this.handleError(err, `PUT`, path)));\n    }\n    /**\n     * Deletes http request service\n     * @param url\n     * @param [header]\n     * @param [requestBody]\n     * @returns delete\n     */\n\n\n    delete(path, header, requestBody) {\n      const options = {\n        headers: header === undefined ? this.header : new HttpHeaders(header),\n        body: requestBody\n      };\n      return this.http.request('delete', path, options).pipe(retry(3), catchError(err => this.handleError(err, `DELETE`, path)));\n    }\n\n  }\n\n  HttpRequestService.ɵfac = function HttpRequestService_Factory(t) {\n    return new (t || HttpRequestService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Logger));\n  };\n\n  HttpRequestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpRequestService,\n    factory: HttpRequestService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpRequestService;\n})();","map":null,"metadata":{},"sourceType":"module"}